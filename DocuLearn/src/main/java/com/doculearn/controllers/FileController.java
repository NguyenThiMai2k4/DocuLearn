package com.doculearn.controllers;

import com.doculearn.service.FileService;
import com.doculearn.service.OpenAiService;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.UUID;


@RestController
@RequestMapping("/course/{id}")
public class FileController {
    @Autowired
    private OpenAiService openAiService;

    @Autowired
    private FileService fileService;

    @PostMapping("/add-file")
    public ResponseEntity<?> handleUpload(@PathVariable ("id") int courseId, @RequestParam("file") MultipartFile file) throws IOException {
        if (file.isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"));
        }

        // Ch·ªâ cho ph√©p PDF
        String originalFilename = StringUtils.cleanPath(file.getOriginalFilename());
        if (!originalFilename.toLowerCase().endsWith(".pdf")) {
            return ResponseEntity.badRequest().body(Map.of("error", "Ch·ªâ h·ªó tr·ª£ file PDF"));
        }

        String fileId = UUID.randomUUID().toString();

        // L∆∞u file t·∫°m
        File tempFile = File.createTempFile("temp_", ".pdf");
        file.transferTo(tempFile);

        // G·ªçi OpenAiService
        String content = openAiService.extractTextFromPDF(tempFile);
        String prompt = openAiService.buildPrompt(content);
        String result = openAiService.callOpenAI(prompt);


        openAiService.generateJsonFiles(result, fileId);
        System.out.println("================== RESULT GENNERATED: \n"+result);

        Path generatedFilePath = Paths.get("src/main/resources/static/generated", fileId + ".json");

        fileService.importFromJson(generatedFilePath,courseId);

        // Tr·∫£ k·∫øt qu·∫£ JSON
        String baseUrl = "/generated/";
        return ResponseEntity.ok(Map.of(
                "json", baseUrl + fileId + ".json",
                "fileName", originalFilename,
                "contentLength", result.length()
        ));


    }

}

//        String result = """
//        {
//          "summary": {
//            "title": "**Ch∆∞∆°ng 1: Nh·∫≠p m√¥n React Native**",
//            "sections": [
//              {
//                "heading": "Ph·∫ßn 1: Gi·ªõi thi·ªáu v·ªÅ React Native",
//                "content": "React Native l√† m·ªôt framework JavaScript d√πng ƒë·ªÉ ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông cho iOS v√† Android. N√≥ cho ph√©p s·ª≠ d·ª•ng c√°c native component thay v√¨ web component, gi√∫p m√£ ngu·ªìn vi·∫øt trong React Native ƒë∆∞·ª£c bi√™n d·ªãch th√†nh native code cho c·∫£ hai h·ªá ƒëi·ªÅu h√†nh. Framework n√†y ch·ªâ c·∫ßn s·ª≠ d·ª•ng JavaScript ƒë·ªÉ ph√°t tri·ªÉn ·ª©ng d·ª•ng, v√† c√≥ m·ªôt c·ªông ƒë·ªìng s·ª≠ d·ª•ng l·ªõn."
//              },
//              {
//                "heading": "Ph·∫ßn 5: State",
//                "content": "State l√† ƒë·ªëi t∆∞·ª£ng l∆∞u gi√° tr·ªã c√°c thu·ªôc t√≠nh c·ªßa component v√† ch·ªâ c√≥ hi·ªáu l·ª±c trong ph·∫°m vi component ƒë√≥. State c√≥ th·ªÉ thay ƒë·ªïi b·∫•t c·ª© khi n√†o b·∫±ng ph∆∞∆°ng th·ª©c this.setState()."
//              },
//              {
//                "heading": "Ph·∫ßn 6: V√≤ng ƒë·ªùi React Component",
//                "content": "M·ªói component c√≥ 3 giai ƒëo·∫°n ch√≠nh: Mounting (l√∫c ƒë∆∞a component v√†o DOM), Updating (khi props ho·∫∑c state thay ƒë·ªïi), v√† Unmounting (khi component ƒë∆∞·ª£c g·ª° b·ªè kh·ªèi DOM)."
//              }
//            ]
//          },
//          "multipleChoice": [
//            {
//              "question": "1. React Native l√† g√¨?",
//              "options": [
//                "M·ªôt ng√¥n ng·ªØ l·∫≠p tr√¨nh m·ªõi",
//                "M·ªôt framework JavaScript cho ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông",
//                "M·ªôt c√¥ng c·ª• ph√°t tri·ªÉn web",
//                "M·ªôt h·ªá ƒëi·ªÅu h√†nh m·ªõi"
//              ]
//            },
//             {
//              "question": "4. Khi state thay ƒë·ªïi trong m·ªôt component, ƒëi·ªÅu g√¨ x·∫£y ra?",
//              "options": [
//                "Component s·∫Ω b·ªã x√≥a",
//                "Component s·∫Ω kh√¥ng thay ƒë·ªïi",
//                "Component s·∫Ω n·∫°p l·∫°i (re-render)",
//                "Kh√¥ng c√≥ g√¨ x·∫£y ra"
//              ]
//            }
//          ],
//          "essayQuestions": [
//            "üñãÔ∏è C√¢u h·ªèi t·ª± lu·∫≠n:",
//            "1. H√£y ph√¢n t√≠ch vai tr√≤ c·ªßa Props v√† State trong React Native v√† c√°ch ch√∫ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng.",
//            "2. Tr√¨nh b√†y v√† ph√¢n t√≠ch c√°c giai ƒëo·∫°n trong v√≤ng ƒë·ªùi c·ªßa m·ªôt React component, gi·∫£i th√≠ch t·∫°i sao vi·ªác hi·ªÉu r√µ c√°c giai ƒëo·∫°n n√†y l·∫°i quan tr·ªçng trong ph√°t tri·ªÉn ·ª©ng d·ª•ng."
//          ]
//        }
//        """;
