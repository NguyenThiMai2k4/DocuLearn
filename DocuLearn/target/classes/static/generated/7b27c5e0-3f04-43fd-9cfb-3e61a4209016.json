{
  "summary": {
    "title": "**Chương 1: Nhập môn React Native**",
    "sections": [
      {
        "heading": "Phần 1: Giới thiệu",
        "content": "React Native là một framework JavaScript được sử dụng để xây dựng ứng dụng di động trên cả hai nền tảng iOS và Android. Khác với các web component, React Native sử dụng các native component. Mã nguồn viết bằng React Native được biên dịch thành native code, giúp ứng dụng chạy mượt mà trên cả hai hệ điều hành. Ngoài ra, cộng đồng sử dụng React Native rất lớn, hỗ trợ mạnh mẽ cho việc phát triển."
      },
      {
        "heading": "Phần 2: Ứng dụng đầu tiên",
        "content": "Để bắt đầu với React Native, cần cài đặt NodeJS và công cụ tạo project. Thực thi lệnh `npx expo start` để khởi chạy ứng dụng, có thể chạy trên Expo Client qua điện thoại bằng cách quét mã QR. Để chạy trên máy giả lập Android, cần cài đặt Android Studio, tạo AVD và chạy máy giả lập. Có thể chạy lại project với các lệnh như `npm start`, `s`, `a`."
      },
      {
        "heading": "Phần 3: Debugging",
        "content": "Quá trình debugging trên Android sử dụng tổ hợp phím Command + M, trong khi trên iOS là Command + D. Điều này giúp kiểm tra và sửa lỗi trong quá trình phát triển ứng dụng."
      },
      {
        "heading": "Phần 4: Props",
        "content": "Props là các đối số truyền vào component, tương tự như thuộc tính. Giá trị của props không thể thay đổi trong component con. Khi sử dụng constructor, props phải được truyền vào và sử dụng phương thức super để gọi React.Component."
      },
      {
        "heading": "Phần 5: State",
        "content": "State là đối tượng lưu giá trị các thuộc tính của component, chỉ có hiệu lực trong phạm vi component. State có thể thay đổi bất cứ khi nào sử dụng phương thức `this.setState()`. Khi state thay đổi, component sẽ được nạp lại. Truy cập thuộc tính của state thông qua `this.state.propertyName`."
      },
      {
        "heading": "Phần 6: Vòng đời React Component",
        "content": "Mỗi component React có ba giai đoạn chính: Mounting (khi đưa component vào DOM), Updating (khi component được cập nhật do thay đổi trong props hoặc state), và Unmounting (khi component bị gỡ khỏi DOM)."
      }
    ]
  },
  "multipleChoice": [
    {
      "question": "1. React Native sử dụng ngôn ngữ lập trình nào để phát triển ứng dụng di động?",
      "options": [
        "Java",
        "Swift",
        "Kotlin",
        "JavaScript"
      ]
    },
    {
      "question": "2. Để bắt đầu một project mới với Expo, lệnh nào sau đây được sử dụng?",
      "options": [
        "npx create-react-app",
        "npx expo init",
        "npx create-expo-app",
        "npx start-expo"
      ]
    },
    {
      "question": "3. Trong React Native, khi nào một component được cập nhật?",
      "options": [
        "Khi component được xóa khỏi DOM",
        "Khi props hoặc state thay đổi",
        "Khi component được tạo mới",
        "Khi ứng dụng khởi động"
      ]
    },
    {
      "question": "4. Props trong React Native có thể:",
      "options": [
        "Thay đổi giá trị trong component con",
        "Chỉ đọc và không thay đổi giá trị",
        "Không thể truyền vào component",
        "Tự động cập nhật giá trị"
      ]
    },
    {
      "question": "5. Để debugging trên máy Mac cho ứng dụng iOS, tổ hợp phím nào được sử dụng?",
      "options": [
        "Command + M",
        "Command + D",
        "Command + P",
        "Command + N"
      ]
    }
  ],
  "essayQuestions": [
    "🖋️ Câu hỏi tự luận:",
    "1. Phân tích ưu và nhược điểm của việc sử dụng React Native trong phát triển ứng dụng di động đa nền tảng. Hãy đưa ra ví dụ minh họa cụ thể.",
    "2. Mô tả chi tiết vòng đời của một React Component và giải thích cách mỗi giai đoạn có thể ảnh hưởng đến hiệu suất ứng dụng."
  ]
}